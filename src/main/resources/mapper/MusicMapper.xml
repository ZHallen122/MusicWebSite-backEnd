<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.music.musicwebsitebackend.dao.MusicMapper">
    <resultMap id="BaseResultMap" type="com.music.musicwebsitebackend.entity.Music" >
        <id column="id"  jdbcType="INTEGER" property="id"/>
        <result column="singer_id" jdbcType="INTEGER" property="singer_id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="create_time"/>
        <result column="upDate_time" jdbcType="TIMESTAMP" property="update_time"/>
        <result column="pic" jdbcType="VARCHAR" property="pic"/>
        <result column="introduction" jdbcType="LONGVARCHAR" property="introduction"/>
        <result column="lyric" jdbcType="LONGVARCHAR" property="lyric"/>
        <result column="types" jdbcType="VARCHAR" property="types"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,name,create_time,update_time,pic,singer_id,introduction,lyric,types,url
    </sql>

    <insert id="insertMusic">
        insert into music (id,name,create_time,update_time,pic,singer_id
                        ,introduction,lyric,types,url
        )
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
                    #{create_time,jdbcType=TIMESTAMP},
                    #{update_time,jdbcType=TIMESTAMP}, #{pic,jdbcType=VARCHAR},
                    #{singer_id,jdbcType=INTEGER},#{introduction,jdbcType=VARCHAR},#{lyric,jdbcType=VARCHAR},
                    #{types,jdbcType=VARCHAR},#{url,jdbcType=VARCHAR}
               )
    </insert>

    <delete id="deleteMusicByArtistId" parameterType="java.lang.Integer">
        delete
        from music where singer_id = #{singer_id,jdbcType=INTEGER}
    </delete>

    <update id="updateMusic" parameterType="com.music.musicwebsitebackend.entity.Music">
        update music
        set name = #{name,jdbcType=VARCHAR},
            singer_id = (
                select artist_id from Artist where artist_id = #{singer_id,jdbcType=INTEGER}
            ),
            pic = #{pic,jdbcType=VARCHAR},
            create_time = #{create_time,jdbcType=TIMESTAMP},
            update_time = #{update_time,jdbcType=TIMESTAMP},
            types = #{types,jdbcType=VARCHAR},
            lyric = #{lyric,jdbcType=LONGVARCHAR},
            introduction = #{introduction,jdbcType=VARCHAR},
            url = #{url,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>



    <delete id="deleteMusic" parameterType="java.lang.Integer" >
        delete from music
        where id = #{id, jdbcType=INTEGER}
    </delete>

    <select id="findMusic" resultType="com.music.musicwebsitebackend.entity.Music" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from music
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="findAllMusic" resultType="com.music.musicwebsitebackend.entity.Music">
        select *
        from music
    </select>

    <select id="topFiftyMusic" resultType="com.music.musicwebsitebackend.entity.Music">
        SELECT m.*, f.favorites_numbers
        FROM music m
        INNER JOIN favorites f ON m.id = f.music_Id
        ORDER BY f.favorites_numbers DESC
        LIMIT 50;
    </select>

</mapper>